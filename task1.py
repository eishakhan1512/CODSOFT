# -*- coding: utf-8 -*-
"""TASK1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/131qhzG4ii3aVgXOCBuj6_3kujE07INN6

# **TASK1 TITANIC SURVIVAL PREDICTION**

Step1) Import the Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

"""Step2) Load the dataset"""

df = pd.read_csv('/content/Titanic-Dataset.csv')

"""Step3) Visualize the dataset"""

df.head()

df.info()

"""Step4) DataSet contains missing values, replace these missing values with median"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='median')
df['Age'] = imputer.fit_transform(df['Age'].values.reshape(-1, 1))

"""Step5) Convert categorical features to numerical"""

df = pd.get_dummies(df, columns=['Sex', 'Embarked'], drop_first=True)

"""Step6) Finding Correlation-coefficient"""

df.corr()

"""Step 6) Drop irrelevant Features"""

df = df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)

"""Step7) Split the data into features (X) and target variable (y)"""

X = df.drop('Survived', axis=1)
y = df['Survived']

"""Step8) Split the data into training and testing sets

"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Step9) Standardize the features by scaling"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""As the attributes of the dataset are already numeric and data contains no null value lets perform classification

Step8) using DecisionTreeClassifier
"""

from sklearn.tree import DecisionTreeClassifier
# Create a Decision Tree classifier
dt_classifier = DecisionTreeClassifier(random_state=42)
# Train the classifier
dt_classifier.fit(X_train_scaled, y_train)
# Make predictions on the test set
y_pred_dt = dt_classifier.predict(X_test_scaled)
# Evaluate the model
accuracy_dt = accuracy_score(y_test, y_pred_dt)
print(f'Decision Tree Accuracy: {accuracy_dt:.2f}')

"""Step9) Classification using Logistic Regression"""

from sklearn.linear_model import LogisticRegression
# Create a Logistic Regression classifier
lr_classifier = LogisticRegression(random_state=42)
# Train the classifier
lr_classifier.fit(X_train_scaled, y_train)
# Make predictions on the test set
y_pred_lr = lr_classifier.predict(X_test_scaled)
# Evaluate the model
accuracy_lr = accuracy_score(y_test, y_pred_lr)
print(f'Logistic Regression Accuracy: {accuracy_lr:.2f}')

"""Step10) Using Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
rf_classifier = RandomForestClassifier(random_state=42)
# Train the classifier
rf_classifier.fit(X_train_scaled, y_train)
# Make predictions on the test set
y_pred = rf_classifier.predict(X_test_scaled)
# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
# Display classification report
print('Classification Report:')
print(classification_report(y_test, y_pred))